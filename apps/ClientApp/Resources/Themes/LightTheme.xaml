<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Tło okna logowania/rejestracji -->
    <Style TargetType="{x:Type Grid}" BasedOn="{x:Null}"
           x:Key="LoginWindowMainBackground">
        
        <Setter Property="Background"
                Value="#EFFFFA"/>
        
    </Style>

    <!-- Środek okna logowania/rejestracji -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="LoginWindowCenter">
        
        <Setter Property="Background"
                Value="#E1E5ECF4"/>

    </Style>

    <!-- Środek okna logowania/rejestracji -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="ToolBarStyle">
        
        <Setter Property="Background"
                Value="#8A4FFF"/>

    </Style>

    <!-- Widok wprowadzania kodu rejestracji -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="RegisterCodeCenter">
        
        <Setter Property="Background"
                Value="#AAC3BEF7"/>

    </Style>

    <!-- Pasek nawigacji tło -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwNavigationBarBackground">

        <Setter Property="Background"
                Value="#C3BEF7"/>
        
    </Style>

    <!-- Pasek nawigacji -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwNavigationBar">

        <Setter Property="Background"
                Value="#EFFFFA"/>
        <Setter Property="CornerRadius"
                Value="20"/>
        <Setter Property="Margin"
                Value="10,5"/>
        
    </Style>

    <!-- Pasek nawigacji lewy sektor -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwNavigationBarLeft">

        <Setter Property="BorderBrush"
                Value="#C3BEF7"/>
        <Setter Property="BorderThickness"
                Value="0,0,1,0"/>

    </Style>

    <!-- Pasek nawigacji środkowy sektor -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwNavigationBarMiddle">

        <Setter Property="BorderBrush"
                Value="#C3BEF7"/>
        <Setter Property="BorderThickness"
                Value="1,0,1,0"/>

    </Style>

    <!-- Pasek nawigacji prawy sektor -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwNavigationBarRight">

        <Setter Property="BorderBrush"
                Value="#C3BEF7"/>
        <Setter Property="BorderThickness"
                Value="1,0,0,0"/>

    </Style>

    <!-- Sektor dolny zaokrąglony -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="PIWinodwBottomSector">

        <Setter Property="Background"
                Value="#C3BEF7"/>
        <Setter Property="CornerRadius"
                Value="10"/>

    </Style>

    <!-- Czat górny sektor -->
    <Style TargetType="{x:Type Border}" BasedOn="{x:Null}"
           x:Key="ChatTopSector">

        <Setter Property="BorderBrush"
                Value="#EFFFFA"/>
        <Setter Property="BorderThickness"
                Value="0,0,0,2"/>

    </Style>

    <!-- TextBlock -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"
           x:Key="LoginWindowTextBlock">
        
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#212D40"/>
        <Setter Property="FontSize" Value="16"/>

    </Style>

    <!-- TextBlock Chat -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"
           x:Key="ChatTextBlock">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#212D40"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>

    </Style>

    <!-- TextBlock UserInfo -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"
           x:Key="UserInfoTextBlock">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#212D40"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,0"/>
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding FriendInfo.IsANewMessage}" Value="True">
                <Setter Property="TextBlock.FontWeight" Value="UltraBold"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!-- TextBlock komunikaty -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ChatTextBlock}"
           x:Key="NotificationInfo">
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding ItemInfoType}" Value="PendingInvitation">
                <Setter Property="TextBlock.Text" Value="{DynamicResource PendingInfo_String}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ItemInfoType}" Value="ReceivedInvitation">
                <Setter Property="TextBlock.Text" Value="{DynamicResource InvitationsInfo_String}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ItemInfoType}" Value="UserBlocked">
                <Setter Property="TextBlock.Text" Value="{DynamicResource BlockedInfo_String}"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>

    <!-- TextBlock komunikaty dodawania -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ChatTextBlock}"
           x:Key="AddNotificationInfo">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ErrorMessage}" Value="Warning">
                <Setter Property="TextBlock.Foreground" Value="#F0F600"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ErrorMessage}" Value="Info">
                <Setter Property="TextBlock.Foreground" Value="#007C77"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding ErrorMessage}" Value="Error">
                <Setter Property="TextBlock.Foreground" Value="#CB1919"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Textbox Chat-->
    <Style TargetType="{x:Type TextBox}" BasedOn="{x:Null}"
           x:Key="ChatTextBox">

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="#212D40"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border>
                        <Border CornerRadius="8" x:Name="Bd" Background="Transparent"  OpacityMask="{x:Null}">
                            <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Template="{DynamicResource ScrollViewerControlTemplate1}"/>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <!-- ListboxItem kontakty-->
    <Style x:Key="ContactsListbox" TargetType="ListBox">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>
    
    <!-- Listbox kontakty-->
    <Style x:Key="ContactsListboxItem" TargetType="ListBoxItem">
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="_Border"
                            Padding="2"
                            SnapsToDevicePixels="true"
                            Margin="5"
                            CornerRadius="10">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="Transparent"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="#8A4FFF"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="#C18A4FFF"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Passwordbox okrągły-->
    <Style TargetType="PasswordBox" x:Key="RoundCornerPasswordBox">
        
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="#212D40"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border CornerRadius="8" x:Name="Bd" Background="#C18A4FFF"  OpacityMask="{x:Null}">
                        <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Template="{DynamicResource ScrollViewerControlTemplate1}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>
    
    <!-- Textbox okrągły-->
    <Style TargetType="{x:Type TextBox}" BasedOn="{x:Null}"
           x:Key="RoundCornerTextBox">

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="#212D40"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border>
                        <Border CornerRadius="8" x:Name="Bd" Background="#C18A4FFF"  OpacityMask="{x:Null}">
                            <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Template="{DynamicResource ScrollViewerControlTemplate1}"/>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki Okna -->
    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}"
           x:Key="WindowButton">

        <Setter Property="Background" Value="Blue" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="8" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#e8e7e7"/>
                            <Setter Property="Foreground" Value="#212D40"/>
                            <Setter Property="BorderBrush" Value="#e8e7e7"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#8A4FFF"/>
                            <Setter Property="BorderBrush" Value="#00afdd"></Setter>
                            <Setter Property="Foreground" Value="#EFFFFA"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#C3BEF7"/>
                            <Setter Property="BorderBrush" Value="#254c8e"></Setter>
                            <Setter Property="Foreground" Value="#EFFFFA"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#C3BEF7"/>
                            <Setter Property="Foreground" Value="#EFFFFA"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki Okna Logowania-->
    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}"
           x:Key="LoginWindowButton">
        
        <Setter Property="Background" Value="Blue" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="8" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#e8e7e7"/>
                            <Setter Property="Foreground" Value="#212D40"/>
                            <Setter Property="BorderBrush" Value="#e8e7e7"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#8A4FFF"/>
                            <Setter Property="BorderBrush" Value="#00afdd"></Setter>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#C18A4FFF"/>
                            <Setter Property="BorderBrush" Value="#254c8e"></Setter>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#8A4FFF"/>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>

    <!--Guziki Ustawień PIWindow-->
    <Style TargetType="{x:Type RadioButton}" BasedOn="{x:Null}"
           x:Key="PIWindowRadioButon">

        <Setter Property="Background" Value="Blue" />
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" CornerRadius="8" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="transparent"/>
                            <Setter Property="Foreground" Value="#212D40"/>
                            <Setter Property="BorderBrush" Value="#e8e7e7"></Setter>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="#00afdd"></Setter>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#E5ECF4"/>
                            <Setter Property="BorderBrush" Value="#254c8e"></Setter>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#C3BEF7"/>
                            <Setter Property="Foreground" Value="#212D40"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#8A4FFF"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki nawigacyjne PIWindow-->
    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}"
           x:Key="NavigationButton">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}">

                    <Border x:Name="border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                     
                    <ControlTemplate.Triggers>
                       
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="transparent"/>
                            <Setter Property="Width" Value="70"/>
                            <Setter Property="Height" Value="70"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="60"/>
                            <Setter Property="Height" Value="60"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki kontaktowe nawigacyjne PIWindow-->
    <Style TargetType="{x:Type Button}" BasedOn="{x:Null}"
           x:Key="ContactsNavigationButton">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Button}">

                    <Border x:Name="border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="transparent"/>
                            <Setter Property="Width" Value="50"/>
                            <Setter Property="Height" Value="50"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="40"/>
                            <Setter Property="Height" Value="40"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki nawigacyjne dynamiczne mikrofon PIWindow-->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{x:Null}"
           x:Key="MicroButton">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ToggleButton}">

                    <Border x:Name="border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="60"/>
                            <Setter Property="Height" Value="60"/>
                            <Setter Property="Content">
                                <Setter.Value>
                                    <Image Source="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/MicrophoneIcon.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                       

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="60"/>
                            <Setter Property="Height" Value="60"/>
                            <Setter Property="Content">
                                <Setter.Value>
                                    <Image Source="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/MutedMicrophoneIcon.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="transparent"/>
                            <Setter Property="Width" Value="70"/>
                            <Setter Property="Height" Value="70"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Guziki nawigacyjne dynamiczne Słuchawki PIWindow-->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{x:Null}"
           x:Key="HeadphonesButton">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="60"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ToggleButton}">

                    <Border x:Name="border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="60"/>
                            <Setter Property="Height" Value="60"/>
                            <Setter Property="Content">
                                <Setter.Value>
                                    <Image Source="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/HeadphonesIcon.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>


                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Width" Value="60"/>
                            <Setter Property="Height" Value="60"/>
                            <Setter Property="Content">
                                <Setter.Value>
                                    <Image Source="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/MutedHeadphonesIcon.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="transparent"/>
                            <Setter Property="Width" Value="70"/>
                            <Setter Property="Height" Value="70"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Ikona szukaj kontaktu-->
    <Style TargetType="{x:Type Image}" BasedOn="{x:Null}"
           x:Key="SearchIcon">

        <Setter Property="Source" Value="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/FriendsListSearchIcon.png"/>
    </Style>

    <!--Ikona dodaj kontakt-->
    <Style TargetType="{x:Type Image}" BasedOn="{x:Null}"
           x:Key="AddFriendIcon">

        <Setter Property="Source" Value="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/AddFriendIcon.png"/>
    </Style>

    <!--Ikona Listy znajomych-->
    <Style TargetType="{x:Type Image}" BasedOn="{x:Null}"
           x:Key="FriendListIcon">

        <Setter Property="Source" Value="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/FriendsListIcon.png"/>
    </Style>

    <!--Ikona Ustawień znajomych-->
    <Style TargetType="{x:Type Image}" BasedOn="{x:Null}"
           x:Key="SettingsIcon">

        <Setter Property="Source" Value="/ClientApp;component/Resources/Images/Icons/LightThemeIcons/SettingsIcon.png"/>
    </Style>


    <!--ChcekBox Okna Logowania-->
    <Style TargetType="{x:Type CheckBox}" BasedOn="{x:Null}"
           x:Key="LoginWindowCheckBox">
        
        <Setter Property="Background" Value="#C18A4FFF" />
        <Setter Property="Foreground" Value="#212D40" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        
    </Style>

    <!--Kuleczka superanckosci-->
    <Style TargetType="{x:Type Ellipse}" BasedOn="{x:Null}"
           x:Key="SuperBalls">
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="10,0,0,0"/>
        
    </Style>

    <!--Kuleczka statusu-->
    <Style TargetType="{x:Type Ellipse}" BasedOn="{StaticResource SuperBalls}"
           x:Key="StatusBalls">
        <Setter Property="Fill" Value="#007C77"/>

    </Style>

    <!--Kuleczka notyfikacji-->
    <Style TargetType="{x:Type Ellipse}" BasedOn="{StaticResource SuperBalls}"
           x:Key="NotificationBalls">
        <Setter Property="Fill" Value="#212D40"/>
        <Setter Property="Visibility" Value="Hidden"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding ContactsVM.NotificationBall}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ContactsVM.ContactManagerVM.NotificationBall}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!-- Okno profilu -->
    <Style TargetType="{x:Type RadioButton}" BasedOn="{x:Null}"
           x:Key="UserView">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid Height="40">
                        <TextBlock Grid.Column="1"
                                   Style="{DynamicResource ChatTextBlock}"
                                   Text="{TemplateBinding Property=Content}"
                                   Padding="10,0,0,0"/>
                    </Grid>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--Item menu-->
    <Style
        x:Key="PIMenuItem"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border MinWidth="200"
                            Width="Auto"
                            x:Name="_Border"
                            CornerRadius="10"
                            Margin="5">
                        <TextBlock Text="{TemplateBinding Header}"
                                   Style="{DynamicResource ChatTextBlock}"
                                   Padding="10,5"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="_Border" Value="#8A4FFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Kontekst menu-->
    <Style TargetType="{x:Type ContextMenu}"
           x:Key="PIContextMenu">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
          Value="true" />
        <Setter Property="HasDropShadow"
          Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource PIMenuItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="#EFFFFA"
                            BorderThickness="1">

                        <Border.BorderBrush>
                            <SolidColorBrush Color="Transparent" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border"
                                    Property="Padding"
                                    Value="0,3,0,3" />
                            <Setter TargetName="Border"
                                    Property="CornerRadius"
                                    Value="10"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>